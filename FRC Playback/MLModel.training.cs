// This file was auto-generated by ML.NET Model Builder.
using System;
using System.IO;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Microsoft.ML.Data;
using Microsoft.ML.TorchSharp;
using Microsoft.ML.Trainers;
using Microsoft.ML.Transforms.Image;
using Microsoft.ML;
using Microsoft.ML.TorchSharp.AutoFormerV2;
using System.Text.Json.Nodes;
using System.Text.Json;

namespace FRC_Playback
{
    public partial class MLModel
    {
        public const string RetrainFilePath = @"C:\Users\Wyatt\Downloads\Data\import-images\ds0\annotations\instances.json";
        public const int TrainingImageWidth = 800;
        public const int TrainingImageHeight = 600;

        /// <summary>
        /// Train a new model with the provided dataset.
        /// </summary>
        /// <param name="outputModelPath">File path for saving the model. Should be similar to "C:\YourPath\ModelName.mlnet"</param>
        /// <param name="inputDataFilePath">Path to the data file for training.</param>
        public static void Train(string outputModelPath, string inputDataFilePath = RetrainFilePath)
        {
           var mlContext = new MLContext();
           var data = LoadIDataViewFromCocoFile(mlContext, inputDataFilePath);
           var model = RetrainModel(mlContext, data);
           SaveModel(mlContext, model, data, outputModelPath);
        }

        // <summary>
        /// Load an IDataView from a file path.
        /// </summary>
        /// <param name="mlContext">The common context for all ML.NET operations.</param>
        /// <param name="inputDataFilePath">Path to the vott data file for training.</param>
        public static IDataView LoadIDataViewFromCocoFile(MLContext mlContext, string inputDataFilePath)
        {
            return mlContext.Data.LoadFromEnumerable(LoadFromCoco(inputDataFilePath));
        }

        private static IEnumerable<ModelInput> LoadFromCoco(string inputDataFilePath)
        {
            JsonNode jsonNode;
            using (StreamReader r = new StreamReader(inputDataFilePath))
            {
                string json = r.ReadToEnd();
                jsonNode = JsonSerializer.Deserialize<JsonNode>(json);
            }

            var directoryPath = Path.GetDirectoryName(inputDataFilePath);
            var imageData = new List<ModelInput>();
            var categories = jsonNode["categories"].AsArray().ToDictionary(node => node["id"].GetValue<int>(), node => node["name"].GetValue<string>());
            var images = jsonNode["images"].AsArray().ToDictionary(
                node => node["id"].GetValue<int>(),
                node =>
                {
                    var imageFullPath = Path.Combine(directoryPath, node["file_name"].GetValue<string>());
                    var imageWidth = node["width"].GetValue<int>();
                    var imageHeight = node["height"].GetValue<int>();
                    return new { ImageFullPath = imageFullPath, ImageWidth = imageWidth, ImageHeight = imageHeight };
                });
            var annotations = jsonNode["annotations"].AsArray().Select(node =>
            {
                var imageId = node["image_id"].GetValue<int>();
                var categoryId = node["category_id"].GetValue<int>();
                var bbox = node["bbox"].AsArray().Select(bbox => bbox.GetValue<float>()).ToArray();
                var isCrowed = node["iscrowd"].GetValue<int>() != 0;
                return new { ImageId = imageId, CategoryId = categoryId, Bbox = bbox, IsCrowed = isCrowed };
            });
            foreach (var imageGroup in annotations.GroupBy(a => a.ImageId))
            {
                var image = images[imageGroup.Key];
                var sourceWidth = image.ImageWidth;
                var sourceHeight = image.ImageHeight;
        
                CalculateAspectAndOffset(sourceWidth, sourceHeight, TrainingImageWidth, TrainingImageHeight, out float xOffset, out float yOffset, out float aspect);                
                var labels = imageGroup.Select(a => categories[a.CategoryId]).ToArray();
                var boxes = imageGroup.Select(annotation => new[]
                {
                    xOffset + (annotation.Bbox[0] * aspect),
                    yOffset + (annotation.Bbox[1] * aspect),
                    xOffset + ((annotation.Bbox[0] + annotation.Bbox[2]) * aspect),
                    yOffset + ((annotation.Bbox[1] + annotation.Bbox[3]) * aspect),
                }).SelectMany(x => x).ToArray();
                var mlImage = MLImage.CreateFromFile(image.ImageFullPath);
                imageData.Add(new ModelInput
                {
                    Image = mlImage,
                    Labels = labels,
                    Box = boxes,
                });
            }
            return imageData;
        }

        private static void CalculateAspectAndOffset(float sourceWidth, float sourceHeight, float destinationWidth, float destinationHeight, out float xOffset, out float yOffset, out float aspect)
        {
            float widthAspect = destinationWidth / sourceWidth;
            float heightAspect = destinationHeight / sourceHeight;
            xOffset = 0;
            yOffset = 0;
            if (heightAspect < widthAspect)
            {
                aspect = heightAspect;
                xOffset = (destinationWidth - (sourceWidth * aspect)) / 2;     
            }    
            else
            {
                aspect = widthAspect;
                yOffset = (destinationHeight - (sourceHeight * aspect)) / 2;
            }
        }

        /// <summary>
        /// Save a model at the specified path.
        /// </summary>
        /// <param name="mlContext">The common context for all ML.NET operations.</param>
        /// <param name="model">Model to save.</param>
        /// <param name="data">IDataView used to train the model.</param>
        /// <param name="modelSavePath">File path for saving the model. Should be similar to "C:\YourPath\ModelName.mlnet.</param>
        public static void SaveModel(MLContext mlContext, ITransformer model, IDataView data, string modelSavePath)
        {
            // Pull the data schema from the IDataView used for training the model
            DataViewSchema dataViewSchema = data.Schema;

            using (var fs = File.Create(modelSavePath))
            {
                mlContext.Model.Save(model, dataViewSchema, fs);
            }
        }


        /// <summary>
        /// Retrain model using the pipeline generated as part of the training process.
        /// </summary>
        /// <param name="mlContext"></param>
        /// <param name="trainData"></param>
        /// <returns></returns>
        public static ITransformer RetrainModel(MLContext mlContext, IDataView trainData)
        {
            var pipeline = BuildPipeline(mlContext);
            var model = pipeline.Fit(trainData);

            return model;
        }

        /// <summary>
        /// build the pipeline that is used from model builder. Use this function to retrain model.
        /// </summary>
        /// <param name="mlContext"></param>
        /// <returns></returns>
        public static IEstimator<ITransformer> BuildPipeline(MLContext mlContext)
        {
            // Data process configuration with pipeline data transformations
            var pipeline = mlContext.Transforms.Conversion.MapValueToKey(outputColumnName:@"Labels",inputColumnName:@"Labels",addKeyValueAnnotationsAsText:false)      
                                    .Append(mlContext.Transforms.ResizeImages(outputColumnName:@"Image",inputColumnName:@"Image",imageHeight:TrainingImageHeight,imageWidth:TrainingImageWidth,cropAnchor:ImageResizingEstimator.Anchor.Center,resizing:ImageResizingEstimator.ResizingKind.IsoPad))      
                                    .Append(mlContext.MulticlassClassification.Trainers.ObjectDetection(new ObjectDetectionTrainer.Options(){LabelColumnName=@"Labels",PredictedLabelColumnName=@"PredictedLabel",BoundingBoxColumnName=@"Box",ImageColumnName=@"Image",ScoreColumnName=@"score",MaxEpoch=5,InitLearningRate=1,WeightDecay=0,}))      
                                    .Append(mlContext.Transforms.Conversion.MapKeyToValue(outputColumnName:@"PredictedLabel",inputColumnName:@"PredictedLabel"));

            return pipeline;
        }
    }
 }
